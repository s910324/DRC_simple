<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description>DRC simple</description>
 <version/>
 <category/>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>true</autorun>
 <autorun-early>false</autorun-early>
 <shortcut/>
 <show-in-menu>false</show-in-menu>
 <group-name/>
 <menu-path/>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text>import pya
import time
def l_infs(group_key = None):
    ly = pya.LayoutView.current().active_cellview().layout()
    layer_dict =  sorted([{
            "code"     :(str(inf.layer).zfill(3) + str(inf.datatype).zfill(3)),
            "layer"    :inf.layer, 
            "datatype" :inf.datatype,
        } for inf in ly.layer_infos()], key=lambda x: x["code"])
        
    if not(group_key):
        return layer_dict

    grouped_layer_dict = {}
    for key, value in groupby(layer_dict,key = itemgetter(group_key)):
        if not(key in grouped_layer_dict):
            grouped_layer_dict[key] = []
        for item in value:
            grouped_layer_dict[key].append(item)
    return grouped_layer_dict  
         
def layer_to_region(cc, l, d):
    ly           = cc.layout()
    layer_region = pya.Region([ shape.polygon for shape in cc.each_shape(ly.layer(l, d)) ])
    return layer_region
    
def drc_width_check(cc, dup, l, d, drc_spec, out_layer_name = "", tolerance = 0, metrics = pya.Region.Metrics.Projection):
    ly                = cc.layout()
    um                = 1/ly.dbu
    layer_region      = layer_to_region(dup, l, d)
    
    layer_region      = layer_region.merged()
    drc_region        = layer_region.width_check((drc_spec - tolerance) * um, False, metrics).polygons().merged()
    drc_violate_count = drc_region.count()
    
    drc_report = "DRC {l}/{d} width {drc_spec}um: violation {count}".format(
        l=l, d=d, drc_spec=drc_spec, count=drc_violate_count)
    
    out_layer_name = out_layer_name  if out_layer_name else drc_report.split(":")[0]
    
    cc.clear( ly.layer(out_layer_name))
    cc.shapes(ly.layer(out_layer_name)).insert(drc_region)
    return drc_report
    
def drc_space_check(cc, dup, l, d, drc_spec, out_layer_name = "", tolerance = 0, metrics = pya.Region.Metrics.Projection):
    ly                = cc.layout()
    um                = 1/ly.dbu
    layer_region      = layer_to_region(dup, l, d)
    
    layer_region      = layer_region.merged()
    drc_region        = layer_region.space_check( (drc_spec + tolerance) * um, False, metrics).polygons().merged()
    drc_violate_count = drc_region.count()
    
    drc_report = "DRC {l}/{d} space {drc_spec}um: violation {count}".format(
        l=l, d=d, drc_spec=drc_spec, count=drc_violate_count)
    
    out_layer_name = out_layer_name  if out_layer_name else drc_report.split(":")[0]
    cc.clear( ly.layer(out_layer_name))
    cc.shapes(ly.layer(out_layer_name)).insert(drc_region)
    return drc_report
    
def drc_enclosure_check(cc, dup, l1, d1, l2, d2, drc_spec, out_layer_name = "", tolerance = 0, metrics = pya.Region.Metrics.Euclidian):
    ly                = cc.layout()
    um                = 1/ly.dbu
    layer1_region     = layer_to_region(dup, l1, d1)
    layer2_region     = layer_to_region(dup, l2, d2)
    layer1_region     = layer1_region.merged()
    layer2_region     = layer2_region.merged()
    drc_region        = layer2_region.enclosed_check(layer1_region, (drc_spec-tolerance) * um, False, metrics).polygons().merged()
    drc_violate_count = drc_region.count()
    
    drc_report = "DRC {l1}/{d1} enclosure {l2}/{d2} {drc_spec}um: violation {count}".format(
        l1=l1, d1=d1, l2=l2, d2=d2, drc_spec = drc_spec, count=drc_violate_count)
    
    out_layer_name = out_layer_name  if out_layer_name else drc_report.split(":")[0]
    cc.clear( ly.layer(out_layer_name))
    cc.shapes(ly.layer(out_layer_name)).insert(drc_region)
    return drc_report
    
def drc_separation_check(cc, dup, l1, d1, l2, d2, drc_spec, out_layer_name = "", tolerance = 0, metrics = pya.Region.Metrics.Euclidian):
    ly                = cc.layout()
    um                = 1/ly.dbu
    layer1_region     = layer_to_region(dup, l1, d1)
    layer2_region     = layer_to_region(dup, l2, d2)
    layer1_region     = layer1_region.merged()
    layer2_region     = layer2_region.merged()
    drc_region        = layer2_region.separation_check(layer1_region, (drc_spec-tolerance) * um, False, metrics).polygons().merged()
    drc_violate_count = drc_region.count()
    
    drc_report = "DRC {l1}/{d1} separation {l2}/{d2} {drc_spec}um: violation {count}".format(
        l1=l1, d1=d1, l2=l2, d2=d2, drc_spec = drc_spec, count=drc_violate_count)
    
    out_layer_name = out_layer_name  if out_layer_name else drc_report.split(":")[0]
    cc.clear( ly.layer(out_layer_name))
    cc.shapes(ly.layer(out_layer_name)).insert(drc_region)
    return drc_report
        
def drc_relation_check(cc, dup, relation, l1, d1, l2, d2, out_layer_name = ""):
    ly                = cc.layout()
    um                = 1/ly.dbu
    layer1_region     = layer_to_region(dup, l1, d1)
    layer2_region     = layer_to_region(dup, l2, d2)
    layer1_region     = layer1_region.merged()
    layer2_region     = layer2_region.merged()
    drc_region        = pya.Region()

    if relation == "inside":
        drc_region        = layer1_region.inside(layer2_region)   
    if relation == "outside":
        drc_region        = layer1_region.outside(layer2_region) 
    if relation == "covering":
        drc_region        = layer1_region.covering(layer2_region) 
    if relation == "interacting":
        drc_region        = layer1_region.interacting(layer2_region)
    if relation == "overlapping":
        drc_region        = layer1_region.overlapping(layer2_region)

    if relation == "not_inside":
        drc_region        = layer1_region.not_inside(layer2_region) 
    if relation == "not_outside":
        drc_region        = layer1_region.not_outside(layer2_region)
    if relation == "not_covering":
        drc_region        = layer1_region.not_covering(layer2_region)   
    if relation == "not_interacting":
        drc_region        = layer1_region.not_interacting(layer2_region)
    if relation == "not_overlapping":
        drc_region        = layer1_region.not_overlapping(layer2_region) 
                          
    drc_violate_count = drc_region.count()
    
    drc_report = "DRC {l1}/{d1} {relation} {l2}/{d2}: violation {count}".format(
        l1=l1, d1=d1, l2=l2, d2=d2, relation = relation, count=drc_violate_count)
    
    out_layer_name = out_layer_name  if out_layer_name else drc_report.split(":")[0]
    
    cc.clear( ly.layer(out_layer_name))
    cc.shapes(ly.layer(out_layer_name)).insert(drc_region)
    return drc_report    
    

class DRCWidget(pya.QWidget):
    def __init__(self, parent = None):
        super(DRCWidget, self).__init__()
        self.setStyleSheet( """
            QListWidget{
                background: #f9f9f9;
            }

            QListWidget::item {
                border-style: solid;
                border-width:1px;
                border-color:#aeaeae; 
                background-color: #eeeeee;
            }

            QListWidget::item:selected {
                border-style: solid;
                border-width:1px;
                border-color:#aeaeae; 
                background-color: #0078d7;
            }""")

        self.setWindowTitle("MEMS DRC Tool")
        self.resize(540, 600)
        self.setFont(pya.QFont('Microsoft JhengHei', 8, pya.QFont.Normal))
        self.msgBox       = pya.QMessageBox()
        self.h1           = pya.QHBoxLayout()
        self.h2           = pya.QHBoxLayout()
        self.v1           = pya.QVBoxLayout()
        self.v2           = pya.QVBoxLayout()
        self.v3           = pya.QVBoxLayout()
        self.cell_label   = pya.QLabel("Select Cell:")
        self.cell_combo   = pya.QComboBox()
        self.add_drc_w_pb = pya.QPushButton("width\ncheck") 
        self.add_drc_s_pb = pya.QPushButton("space\ncheck") 
        self.add_drc_e_pb = pya.QPushButton("enclose\ncheck") 
        self.add_drc_p_pb = pya.QPushButton("separation\ncheck") 
        self.add_drc_r_pb = pya.QPushButton("relation\ncheck") 
        self.del_drc_pb   = pya.QPushButton("delete\nitem") 
        self.confirm_pb   = pya.QPushButton("Run DRC") 
        self.drc_list     = DRCListWidget()
        self.drc_log      = pya.QTextEdit()
        self.splitter     = pya.QSplitter(pya.Qt.Vertical)
        
        pb_fixed_w = 75
        self.add_drc_w_pb.setFixedWidth(pb_fixed_w)
        self.add_drc_s_pb.setFixedWidth(pb_fixed_w)
        self.add_drc_e_pb.setFixedWidth(pb_fixed_w)
        self.add_drc_p_pb.setFixedWidth(pb_fixed_w)
        self.add_drc_r_pb.setFixedWidth(pb_fixed_w)
        self.del_drc_pb.setFixedWidth(pb_fixed_w)        
        
        self.add_drc_w_pb.clicked(lambda: self.drc_list.addDRCWidget("width"))
        self.add_drc_s_pb.clicked(lambda: self.drc_list.addDRCWidget("space"))
        self.add_drc_e_pb.clicked(lambda: self.drc_list.addDRCWidget("enclosure"))
        self.add_drc_p_pb.clicked(lambda: self.drc_list.addDRCWidget("separation"))
        self.add_drc_r_pb.clicked(lambda: self.drc_list.addDRCWidget("relation"))
        self.del_drc_pb.clicked(  lambda: self.drc_list.removeSel())
        self.confirm_pb.clicked(  lambda: self.run_drc())

        self.h1.addWidget(self.cell_label)
        self.h1.addWidget(self.cell_combo)
        self.h1.addStretch()
        
        self.h2.addWidget(self.splitter)
        self.h2.addLayout(self.v3)
        self.splitter.addWidget(self.drc_list)
        self.splitter.addWidget(self.drc_log)
        
        self.v3.addSpacing(10)
        self.v3.addWidget(self.add_drc_w_pb)        
        self.v3.addWidget(self.add_drc_s_pb)  
        self.v3.addWidget(self.add_drc_e_pb)  
        self.v3.addWidget(self.add_drc_p_pb) 
        self.v3.addWidget(self.add_drc_r_pb) 
        self.v3.addSpacing(30)

        self.v3.addWidget(self.del_drc_pb) 
        self.v3.addStretch() 

        self.v1.addLayout(self.h1)
        self.v1.addLayout(self.h2)
        self.v1.addWidget(self.confirm_pb)
        self.setLayout(self.v1)
        self.init_ui()

    def init_ui(self):
        cv = pya.LayoutView.current()
        ly = cv.active_cellview().layout()
        self.cell_combo.setEditable (True)
        self.cell_combo.setMinimumWidth(200)
        self.cell_combo.clear()    
        for index, name in enumerate(ly.each_cell_top_down()):
            self.cell_combo.addItem (ly.cell_name(name))

        self.drc_list.addDRCWidget("width")
        
    def valid_setup(self):
        cv = pya.LayoutView.current()
        if not cv:
            self.msgBox.setText("No Active View.")
            self.msgBox.exec_()
            return False
        ly = cv.active_cellview().layout()
        if not ly:
            self.msgBox.setText("No Active Layout.")
            self.msgBox.exec_()
            return False
        
        cell_name = self.cell_combo.currentText
        if not ly.cell(cell_name):
            self.msgBox.setText("Invalid cell name")
            self.msgBox.exec_()
            self.init_ui()
            return False
        return True
        
    def run_drc(self):
        if not(self.valid_setup()):
            return
        start_time = time.time()
        cell_name  = self.cell_combo.currentText
        cv         = pya.LayoutView.current()
        ly         = cv.active_cellview().layout()
        cc         = ly.cell(cell_name)
        dup        = cc.dup()
        
        dup.flatten(True)
        self.drc_log.clear()
        self.drc_log.insertPlainText("******* DRC Check start time {local_time} *******\nCell Name: {cell}\n".format(
            cell = cell_name, local_time = time.ctime(start_time)))
        
        for i in range(self.drc_list.count):
            list_widget_item  = self.drc_list.item(i)
            drc_widget        = self.drc_list.itemWidget(list_widget_item)
            layer_start_time  = time.time()
            report = ""
            if isinstance(drc_widget, DRCWidthItemWidget):
                l_str, drc_spec = drc_widget.getValue()
                l, d = [int(item) for item in l_str.split("/")]
                report = drc_width_check(cc, dup, l, d, drc_spec)
                
            if isinstance(drc_widget, DRCSpaceItemWidget):
                l_str, drc_spec = drc_widget.getValue()
                l, d = [int(item) for item in l_str.split("/")]
                report = drc_space_check(cc, dup, l, d, drc_spec)  
                
            if isinstance(drc_widget, DRCEnclosureItemWidget):
                l1_str, l2_str, drc_spec = drc_widget.getValue()
                l1, d1 = [int(item) for item in l1_str.split("/")]
                l2, d2 = [int(item) for item in l2_str.split("/")]
                report = drc_enclosure_check(cc, dup, l1, d1, l2, d2, drc_spec)
            
            if isinstance(drc_widget, DRCSeparationItemWidget):
                l1_str, l2_str, drc_spec = drc_widget.getValue()
                l1, d1 = [int(item) for item in l1_str.split("/")]
                l2, d2 = [int(item) for item in l2_str.split("/")]
                report = drc_separation_check(cc, dup, l1, d1, l2, d2, drc_spec)
            
            if isinstance(drc_widget, DRCRelationItemWidget):
                l1_str, l2_str, relation = drc_widget.getValue()
                l1, d1 = [int(item) for item in l1_str.split("/")]
                l2, d2 = [int(item) for item in l2_str.split("/")]
                report = drc_relation_check(cc, dup, relation, l1, d1, l2, d2) 
            layer_end_time  = time.time()    
            self.drc_log.insertPlainText("       {i}. {report}     ({layer_time:.2f}min)\n".format(
                i=i+1, report = report, layer_time = (layer_end_time - layer_start_time)/60))

            
        dup.delete()
        pya.MainWindow.instance().call_menu("cm_lv_sort_by_ild")
        lv   = pya.Application.instance().main_window().current_view()
        lv.add_missing_layers()
        end_time = time.time()
        self.drc_log.insertPlainText("\nCheck time: {run_time:.2f}min\n******* DRC Check   end time {local_time} *******".format(
            local_time = time.ctime(end_time), run_time = (end_time - start_time)/50))
        
class DRCListWidget(pya.QListWidget):
    def __init__(self, parent = None):
        super(DRCListWidget, self).__init__()      
        self.container    = []   
        self.setSelectionMode(pya.QAbstractItemView.ExtendedSelection)
        
    def removeSel(self):
        selected_items = self.selectedItems()
        if not selected_items: return        
        for item in selected_items:
            self.takeItem(self.row(item))
        
    def addDRCWidget(self, drc_item):
        item_widget      = None
        list_item_widget = pya.QListWidgetItem()
        
        if drc_item == "width":
            item_widget = DRCWidthItemWidget()
        if drc_item == "space":
            item_widget = DRCSpaceItemWidget()

        if drc_item == "enclosure":
            item_widget = DRCEnclosureItemWidget()
            
        if drc_item == "separation":
            item_widget = DRCSeparationItemWidget()  
                     
        if drc_item == "relation":
            item_widget = DRCRelationItemWidget()
                                             
        list_item_widget.setSizeHint(item_widget.sizeHint())
        self.container.append(item_widget)
        self.addItem(list_item_widget)
        self.setItemWidget(list_item_widget, item_widget) 
        
    def addRelationWidget(self):
        self.addDRCWidget("width")
        
    def addRelationWidget(self):
        self.addDRCWidget("space") 
        
    def addEnclosureWidget(self):
        self.addDRCWidget("enclosure")
        
    def addEnclosureWidget(self):
        self.addDRCWidget("separation")
                        
    def addRelationWidget(self):
        self.addDRCWidget("relation")



layer_widget_width = 80
item_widget_width  = 170
spin_widget_width  = 80
unit_label_width   = 25
layout_spacing     = 10
margin_l           = 10
margin_r           = 10
margin_t           = 10
margin_b           = 10

class DRCWidthItemWidget(pya.QWidget):
    def __init__(self, parent = None):
        super(DRCWidthItemWidget, self).__init__()  
        self.layout          = pya.QHBoxLayout()
        self.ly_combo        = pya.QComboBox()   
        self.item_label      = pya.QLabel("width&lt;")   
        self.spec_spin       = pya.QDoubleSpinBox()  
        self.unit_label      = pya.QLabel("um")   

        self.ly_combo.setFixedWidth(layer_widget_width)
        self.item_label.setFixedWidth(item_widget_width)
        self.spec_spin.setFixedWidth(spin_widget_width)
        self.unit_label.setFixedWidth(unit_label_width)  

        self.layout.addStretch()     
        self.layout.addWidget(self.ly_combo)
        self.layout.addWidget(self.item_label)
        self.layout.addWidget(self.spec_spin)
        self.layout.addWidget(self.unit_label)
        self.layout.addSpacing(0)
        
        self.item_label.setAlignment(pya.Qt.AlignRight | pya.Qt.AlignVCenter)
        self.layout.setSpacing(layout_spacing)
        self.layout.setContentsMargins(margin_l, margin_t, margin_r, margin_b)
        self.setLayout(self.layout) 
        self.init_ui()
          
    def init_ui(self):
        for l_inf in l_infs():
            l, d = l_inf["layer"], l_inf["datatype"]
            if (0 &lt;= l  and 0 &lt;= d ):
                self.ly_combo.addItem ("%d/%d" % (l, d))
        self.spec_spin.setRange(0, 1000)
        
        self.ly_combo.setCurrentIndex(0)
        self.spec_spin.setValue(2)
        
    def setValue(self, layer, spec):
        index_l   = self.ly_combo.findText(layer)
        self.ly_combo.setCurrentIndex (index_l if index_l &gt; 0 else 0)
        self.spec_spin.setValue(spec)
        
    def getValue(self):
        return self.ly_combo.currentText, self.spec_spin.value
        
class DRCSpaceItemWidget(pya.QWidget):
    def __init__(self, parent = None):
        super(DRCSpaceItemWidget, self).__init__()  
        self.layout          = pya.QHBoxLayout()
        self.ly_combo        = pya.QComboBox()   
        self.item_label      = pya.QLabel("spacing&lt;")   
        self.spec_spin       = pya.QDoubleSpinBox()  
        self.unit_label      = pya.QLabel("um")   
        
        self.ly_combo.setFixedWidth(layer_widget_width)
        self.item_label.setFixedWidth(item_widget_width)
        self.spec_spin.setFixedWidth(spin_widget_width)
        self.unit_label.setFixedWidth(unit_label_width)  
        
        self.layout.addStretch()
        self.layout.addWidget(self.ly_combo)
        self.layout.addWidget(self.item_label)
        self.layout.addWidget(self.spec_spin)
        self.layout.addWidget(self.unit_label)
        
        self.item_label.setAlignment(pya.Qt.AlignRight | pya.Qt.AlignVCenter)
        self.layout.setSpacing(layout_spacing)
        self.layout.setContentsMargins(margin_l, margin_t, margin_r, margin_b)
        self.setLayout(self.layout) 
        self.init_ui()
          
    def init_ui(self):
        for l_inf in l_infs():
            l, d = l_inf["layer"], l_inf["datatype"]
            if (0 &lt;= l  and 0 &lt;= d ):
                self.ly_combo.addItem ("%d/%d" % (l, d))
        self.spec_spin.setRange(0, 1000)
        
        self.ly_combo.setCurrentIndex(0)
        self.spec_spin.setValue(2)
        
    def setValue(self, layer, spec):
        index_l   = self.ly_combo.findText(layer)
        self.ly_combo.setCurrentIndex (index_l if index_l &gt; 0 else 0)
        self.spec_spin.setValue(spec)
        
    def getValue(self):
        return self.ly_combo.currentText, self.spec_spin.value
          
class DRCEnclosureItemWidget(pya.QWidget):
    def __init__(self, parent = None):
        super(DRCEnclosureItemWidget, self).__init__()  
        self.layout          = pya.QHBoxLayout()
        self.ly_combo1       = pya.QComboBox()   
        self.item_label      = pya.QLabel("enclosure")   
        self.ly_combo2       = pya.QComboBox()
        self.spec_spin       = pya.QDoubleSpinBox()  
        self.unit_label      = pya.QLabel("um")   
        
        self.ly_combo1.setFixedWidth(layer_widget_width)
        self.ly_combo2.setFixedWidth(layer_widget_width)
        self.item_label.setFixedWidth(item_widget_width-layer_widget_width-layout_spacing)
        self.spec_spin.setFixedWidth(spin_widget_width)
        self.unit_label.setFixedWidth(unit_label_width)  

        self.layout.addStretch()  
        self.layout.addWidget(self.ly_combo1)
        self.layout.addWidget(self.item_label)
        self.layout.addWidget(self.ly_combo2)
        self.layout.addWidget(self.spec_spin)
        self.layout.addWidget(self.unit_label)
        
        
        self.item_label.setAlignment(pya.Qt.AlignRight | pya.Qt.AlignVCenter)
        self.layout.setSpacing(layout_spacing)
        self.layout.setContentsMargins(margin_l, margin_t, margin_r, margin_b)
        self.setLayout(self.layout) 
        self.init_ui()
          
    def init_ui(self):
        for l_inf in l_infs():
            l, d = l_inf["layer"], l_inf["datatype"]
            if (0 &lt;= l  and 0 &lt;= d ):
                self.ly_combo1.addItem ("%d/%d" % (l, d))
                self.ly_combo2.addItem ("%d/%d" % (l, d))
                
        self.spec_spin.setRange(0, 1000)       
        self.ly_combo1.setCurrentIndex(0)
        self.ly_combo2.setCurrentIndex(0)
        self.spec_spin.setValue(2)

            
    def setValue(self, layer1, layer2, relation):
        index_l1  = self.ly_combo1.findText(layer1)
        index_l2  = self.ly_combo2.findText(layer2)
        self.spec_spin.setValue(2)
        
        self.ly_combo1.setCurrentIndex      (index_l1 if index_l1 &gt; 0 else 0)
        self.ly_combo2.setCurrentIndex      (index_l2 if index_l2 &gt; 0 else 0)

        
    def getValue(self):
        return self.ly_combo1.currentText, self.ly_combo2.currentText, self.spec_spin.value
        
class DRCSeparationItemWidget(pya.QWidget):
    def __init__(self, parent = None):
        super(DRCSeparationItemWidget, self).__init__()  
        self.layout          = pya.QHBoxLayout()
        self.ly_combo1       = pya.QComboBox()   
        self.item_label      = pya.QLabel("separation")   
        self.ly_combo2       = pya.QComboBox()
        self.spec_spin       = pya.QDoubleSpinBox()  
        self.unit_label      = pya.QLabel("um")   
        
        self.ly_combo1.setFixedWidth(layer_widget_width)
        self.ly_combo2.setFixedWidth(layer_widget_width)
        self.item_label.setFixedWidth(item_widget_width-layer_widget_width-layout_spacing)
        self.spec_spin.setFixedWidth(spin_widget_width)
        self.unit_label.setFixedWidth(unit_label_width)  

        self.layout.addStretch()  
        self.layout.addWidget(self.ly_combo1)
        self.layout.addWidget(self.item_label)
        self.layout.addWidget(self.ly_combo2)
        self.layout.addWidget(self.spec_spin)
        self.layout.addWidget(self.unit_label)
        
        
        self.item_label.setAlignment(pya.Qt.AlignRight | pya.Qt.AlignVCenter)
        self.layout.setSpacing(layout_spacing)
        self.layout.setContentsMargins(margin_l, margin_t, margin_r, margin_b)
        self.setLayout(self.layout) 
        self.init_ui()
          
    def init_ui(self):
        for l_inf in l_infs():
            l, d = l_inf["layer"], l_inf["datatype"]
            if (0 &lt;= l and 0 &lt;= d ):
                self.ly_combo1.addItem ("%d/%d" % (l, d))
                self.ly_combo2.addItem ("%d/%d" % (l, d))
                
        self.spec_spin.setRange(0, 1000)       
        self.ly_combo1.setCurrentIndex(0)
        self.ly_combo2.setCurrentIndex(0)
        self.spec_spin.setValue(2)

            
    def setValue(self, layer1, layer2, relation):
        index_l1  = self.ly_combo1.findText(layer1)
        index_l2  = self.ly_combo2.findText(layer2)
        self.spec_spin.setValue(2)
        
        self.ly_combo1.setCurrentIndex      (index_l1 if index_l1 &gt; 0 else 0)
        self.ly_combo2.setCurrentIndex      (index_l2 if index_l2 &gt; 0 else 0)

        
    def getValue(self):
        return self.ly_combo1.currentText, self.ly_combo2.currentText, self.spec_spin.value
                          
class DRCRelationItemWidget(pya.QWidget):
    def __init__(self, parent = None):
        super(DRCRelationItemWidget, self).__init__()  
        self.layout          = pya.QHBoxLayout()
        self.ly_combo1       = pya.QComboBox()   
        self.relation_combo  = pya.QComboBox()
        self.ly_combo2       = pya.QComboBox()

        self.ly_combo1.setFixedWidth(layer_widget_width)
        self.relation_combo.setFixedWidth(item_widget_width)
        self.ly_combo2.setFixedWidth(layer_widget_width )
        
        self.layout.addStretch()
        self.layout.addWidget(self.ly_combo1)
        self.layout.addWidget(self.relation_combo)
        self.layout.addWidget(self.ly_combo2)
        self.layout.addSpacing(unit_label_width + layout_spacing)

        self.layout.setSpacing(layout_spacing)
        self.layout.setContentsMargins(margin_l, margin_t, margin_r, margin_b)
        self.setLayout(self.layout) 
        self.init_ui()
          
    def init_ui(self):
        for l_inf in l_infs():
            l, d = l_inf["layer"], l_inf["datatype"]
            if (0 &lt;= l  and 0 &lt;= d ):
                self.ly_combo1.addItem ("%d/%d" % (l, d))
                self.ly_combo2.addItem ("%d/%d" % (l, d))

        self.ly_combo1.setCurrentIndex(0)
        self.ly_combo2.setCurrentIndex(0)
        self.relation_combo.setCurrentIndex(0)
        
        for relation in ["inside", "outside", "covering", "interacting", "overlapping", "not_inside", "not_outside", "not_covering", "not_interacting", "not_overlapping"]:
            self.relation_combo.addItem (relation)
            
    def setValue(self, layer1, layer2, relation):
        index_l1  = self.ly_combo1.findText(layer1)
        index_l2  = self.ly_combo2.findText(layer2)
        index_r   = self.ly_combo1.findText(relation)
        
        self.ly_combo1.setCurrentIndex      (index_l1 if index_l1 &gt; 0 else 0)
        self.ly_combo2.setCurrentIndex      (index_l2 if index_l2 &gt; 0 else 0)
        self.relation_combo.setCurrentIndex (index_r  if index_r  &gt; 0 else 0)
        
    def getValue(self):
        return self.ly_combo1.currentText, self.ly_combo2.currentText, self.relation_combo.currentText
        
#dialog = DRCWidget(pya.Application.instance().main_window())
#dialog.show()

def CallDRCWidget():
    cv     = pya.LayoutView.current() 
    msgBox = pya.QMessageBox()
    if not cv:
        msgBox.setText("No Active View.")
        msgBox.exec_()
        
    else:
        ly = cv.active_cellview().layout()  
        if not ly:
            msgBox.setText("No Active Layout.")
            msgBox.exec_()
        else:   
            DRCWidget(pya.Application.instance().main_window()).show()
        
menu      = pya.Application.instance().main_window().menu()
act       = pya.Action()
act.title = "★MEMS DRC check"
menu.insert_item("tools_menu.end", "MEMS DRC check", act)
act.on_triggered(CallDRCWidget)
</text>
</klayout-macro>
